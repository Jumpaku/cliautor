# Code generated by github.com/Jumpaku/cyamli v1.1.5, DO NOT EDIT.

from dataclasses import dataclass
import typing


@dataclass
class CLI_Sub_Input:
    
    arg_arg_integer: int = int()
    arg_arg_boolean: bool = bool()
    arg_arg_string: str = str()
    arg_arg_variadic: tuple[str,...] = tuple[str,...]()
    
    pass


FuncType_CLI_Sub = typing.Callable[[None,list[str],CLI_Sub_Input,Exception],None]
class CLI_Sub:
    
    FUNC: FuncType_CLI_Sub = None


def resolve_CLI_Sub_Input(rest_args: list[str])->CLI_Sub_Input:
    input = CLI_Sub_Input()
    arguments = []
    for i, arg in enumerate(rest_args):
        if arg == "--":
            arguments += rest_args[i+1:]
            break
        if not arg.startswith("-"):
            arguments.append(arg)
            continue
        split = arg.split("=", 1)
        opt_name, assign = split[0], len(split) > 1
        
        raise Exception("unsupported option " + opt_name)
    if len(arguments) <= 0:
        raise Exception("too few arguments")
    input.arg_arg_integer = parse_value(int, arguments[0])
    if len(arguments) <= 1:
        raise Exception("too few arguments")
    input.arg_arg_boolean = parse_value(bool, arguments[1])
    if len(arguments) <= 2:
        raise Exception("too few arguments")
    input.arg_arg_string = parse_value(str, arguments[2])
    if len(arguments) <= 3 - 1:
        raise Exception("too few arguments")
    input.arg_arg_variadic = parse_value(tuple[str,...], *arguments[3:])
    
    return input



@dataclass
class CLI_Input:
    
    
    pass


FuncType_CLI = typing.Callable[[None,list[str],CLI_Input,Exception],None]
class CLI:
    sub: CLI_Sub = CLI_Sub()
    
    FUNC: FuncType_CLI = None


def resolve_CLI_Input(rest_args: list[str])->CLI_Input:
    input = CLI_Input()
    arguments = []
    for i, arg in enumerate(rest_args):
        if arg == "--":
            arguments += rest_args[i+1:]
            break
        if not arg.startswith("-"):
            arguments.append(arg)
            continue
        split = arg.split("=", 1)
        opt_name, assign = split[0], len(split) > 1
        
        raise Exception("unsupported option " + opt_name)
    
    return input


def run(cli: CLI, args: list[str]):
    r = resolve_subcommand(args)
    subcommand_path, rest_args = r.subcommand, r.rest_args
    joined_subcommand = " ".join(subcommand_path)
    
    if joined_subcommand == "":
        if not cli.FUNC:
            raise Exception("unsupported subcommand \"" + "" + "\": cli.FUNC not assigned")
        ex: Exception = None
        input: CLI_Input = None
        try:
            input = resolve_CLI_Input(rest_args)
        except Exception as e:
            ex = e
        cli.FUNC(subcommand_path, input, ex)
        return
    
    
    if joined_subcommand == "sub":
        if not cli.sub.FUNC:
            raise Exception("unsupported subcommand \"" + "sub" + "\": cli.sub.FUNC not assigned")
        ex: Exception = None
        input: CLI_Sub_Input = None
        try:
            input = resolve_CLI_Sub_Input(rest_args)
        except Exception as e:
            ex = e
        cli.sub.FUNC(subcommand_path, input, ex)
        return
    
    raise Exception("subcommand not found: " + joined_subcommand)

@dataclass
class ResolveSubcommandResult:
    subcommand: list[str]
    rest_args: list[str]


def resolve_subcommand(args: list[str])->ResolveSubcommandResult:
    if not args:
        raise Exception("command line arguments are too few")
    
    subcommand_set = {
        "",
        "sub",
    }

    subcommand_path = []
    for arg in args[1:]:
        if arg == "--":
            break
        if " ".join(subcommand_path + [arg]) not in subcommand_set:
            break
        subcommand_path.append(arg)
    
    return ResolveSubcommandResult(subcommand_path, args[1+len(subcommand_path):])


def parse_value(typ, *str_values: str) -> typing.Union[str, bool, float, int, tuple[str, ...], tuple[bool, ...], tuple[float, ...], tuple[int, ...]]:
    try: 
        if typ == str:
            return str(str_values[0])
        if typ == bool:
            if str_values[0] in {"", "0", "f", "F", "FALSE", "false", "False"}:
                return False
            if str_values[0] in {"1", "t", "T", "TRUE", "true", "True"}:
                return True
            raise Exception("could not convert string to bool: '" + str_values[0] + "'")
        if typ == float:
            return float(str_values[0])
        if typ == int:
            return int(str_values[0], base=0)
        if typ == tuple[str,...]:
            return tuple([parse_value(str, s) for s in str_values])
        if typ == tuple[bool,...]:
            return tuple([parse_value(bool, s) for s in str_values])
        if typ == tuple[float,...]:
            return tuple([parse_value(float, s) for s in str_values])
        if typ == tuple[int,...]:
            return tuple([parse_value(int, s) for s in str_values])
        raise Exception("unsupported type")
    except Exception as e:
        e.add_note('fail to parse string value as ' + typ.__name__)
        raise


def get_doc(subcommand: list[str]) -> str:
    joined_subcommand = " ".join(subcommand)
    
    if joined_subcommand == "":
        return "<program>\n\n<program>\n\n    Syntax:\n        $ <program> \n\n    Subcommands:\n        sub:\n\n\n"
    
    
    if joined_subcommand == "sub":
        return "<program>\n\n<program> sub\n\n    Syntax:\n        $ <program> sub [<argument>]... [-- [<argument>]...]\n\n    Arguments:\n        1.  <arg_integer:integer>\n\n        2.  <arg_boolean:boolean>\n\n        3.  <arg_string:string>\n\n        4. [<arg_variadic:string>]...\n\n\n"
    
    raise Exception("subcommand not found: " + joined_subcommand)
