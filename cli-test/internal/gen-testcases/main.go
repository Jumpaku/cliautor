package main

import (
	"github.com/samber/lo"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func main() {
	if len(os.Args) != 2 {
		log.Panic(`positional arguments <out_dir_path> are required`)
	}
	outDirPath := os.Args[1]

	for _, g := range groups {
		for _, l := range g.Languages {
			groupDir := filepath.Join(outDirPath, l.Name, g.Group)
			if err := os.MkdirAll(groupDir, 0777); err != nil {
				log.Panicf(`failed to create %q: %+v`, groupDir, err)
			}

			testcasesFile := filepath.Join(groupDir, "testcases.sh")
			f, err := os.Create(testcasesFile)
			if err != nil {
				log.Panicf(`failed to create %q: %+v`, testcasesFile, err)
			}
			defer f.Close()

			data := lo.Map(g.Testcases, func(t testcase, _ int) dataElement {
				return dataElement{
					Message:    t.Message,
					Want:       t.Want,
					Entrypoint: l.Entrypoint,
					Args:       strings.Join(t.Args, " "),
				}
			})

			if err := testcasesScriptTemplate.Execute(f, data); err != nil {
				log.Panicf(`failed to execute template %q: %+v`, testcasesScriptTemplate.Name(), err)
			}
		}
	}
}

var languages = []language{
	{
		Name:       "golang",
		Entrypoint: "go run ./*.go",
	},
	{
		Name:       "python3",
		Entrypoint: "python main.py",
	},
	{
		Name:       "dart",
		Entrypoint: "dart main.dart",
	},
}
var groups = []group{
	groupRootCommandOption,
	groupRootCommandPositional,
	groupSubcommandOption,
	groupSubcommandPositional,
}

const testcasesScript = `{{- /* Go Template */ -}}
#!/bin/sh
# Code generated by go run ./cli-test/internal/gen-testcases/... DO NOT EDIT!

run_test() {
    message=$1
    want=$2
    entrypoint=$3
    shift 3
    got=$( ${entrypoint} $@ )

    if [ "${got}" = "${want}" ]; then
        echo "OK: ${message}"
    else
        echo "NG: ${message}"
        echo "  execution: ${entrypoint} $@"
        echo "  want:      '${want}'"
        echo "  got:       '${got}'"
    fi
}

{{range .}}
run_test '{{.Message}}' \
    '{{.Want}}' \
    {{.Entrypoint}} {{.Args}}
{{end}}
`

var testcasesScriptTemplate = template.Must(template.New("testcases-script").Parse(testcasesScript))

type group struct {
	Group     string
	CLI       string
	Languages []language
	Testcases []testcase
}

type language struct {
	Name       string
	Entrypoint string
}

type testcase struct {
	Message string
	Want    string
	Args    []string
}

type dataElement struct {
	Message    string
	Want       string
	Entrypoint string
	Args       string
}
