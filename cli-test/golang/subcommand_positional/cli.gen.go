// Code generated by github.com/Jumpaku/cyamli v1.1.5, DO NOT EDIT.
package main

import (
	"fmt"
	"strconv"
	"strings"
)

type Func[Input any] func(subcommand []string, input Input, inputErr error) (err error)

type CLI struct {
	Sub CLI_Sub

	FUNC Func[CLI_Input]
}
type CLI_Input struct {
}

func resolve_CLI_Input(input *CLI_Input, restArgs []string) error {
	*input = CLI_Input{}

	var arguments []string
	for idx, arg := range restArgs {
		if arg == "--" {
			arguments = append(arguments, restArgs[idx+1:]...)
			break
		}
		if !strings.HasPrefix(arg, "-") {
			arguments = append(arguments, arg)
			continue
		}
		optName, lit, cut := strings.Cut(arg, "=")
		consumeVariables(optName, lit, cut)

		switch optName {
		default:
			return fmt.Errorf("unknown option %q", optName)

		}
	}

	return nil
}

type CLI_Sub struct {
	FUNC Func[CLI_Sub_Input]
}
type CLI_Sub_Input struct {
	Arg_ArgInteger int64

	Arg_ArgBoolean bool

	Arg_ArgString string

	Arg_ArgVariadic []string
}

func resolve_CLI_Sub_Input(input *CLI_Sub_Input, restArgs []string) error {
	*input = CLI_Sub_Input{}

	var arguments []string
	for idx, arg := range restArgs {
		if arg == "--" {
			arguments = append(arguments, restArgs[idx+1:]...)
			break
		}
		if !strings.HasPrefix(arg, "-") {
			arguments = append(arguments, arg)
			continue
		}
		optName, lit, cut := strings.Cut(arg, "=")
		consumeVariables(optName, lit, cut)

		switch optName {
		default:
			return fmt.Errorf("unknown option %q", optName)

		}
	}

	if len(arguments) <= 0 {
		return fmt.Errorf("too few arguments")
	}
	if err := parseValue(&input.Arg_ArgInteger, arguments[0]); err != nil {
		return fmt.Errorf("value is not assignable to argument at [%d]", 0)
	}

	if len(arguments) <= 1 {
		return fmt.Errorf("too few arguments")
	}
	if err := parseValue(&input.Arg_ArgBoolean, arguments[1]); err != nil {
		return fmt.Errorf("value is not assignable to argument at [%d]", 1)
	}

	if len(arguments) <= 2 {
		return fmt.Errorf("too few arguments")
	}
	if err := parseValue(&input.Arg_ArgString, arguments[2]); err != nil {
		return fmt.Errorf("value is not assignable to argument at [%d]", 2)
	}

	if len(arguments) <= 3-1 {
		return fmt.Errorf("too few arguments")
	}
	if err := parseValue(&input.Arg_ArgVariadic, arguments[3:]...); err != nil {
		return fmt.Errorf("values [%s] are not assignable to arguments at [%d:]", strings.Join(arguments[3:], " "), 3)
	}

	return nil
}

func NewCLI() CLI {
	return CLI{}
}

func Run(cli CLI, args []string) error {
	subcommandPath, restArgs := resolveSubcommand(args)
	switch strings.Join(subcommandPath, " ") {

	case "":
		funcMethod := cli.FUNC
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.FUNC not assigned", "")
		}
		var input CLI_Input
		err := resolve_CLI_Input(&input, restArgs)
		return funcMethod(subcommandPath, input, err)

	case "sub":
		funcMethod := cli.Sub.FUNC
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.Sub.FUNC not assigned", "sub")
		}
		var input CLI_Sub_Input
		err := resolve_CLI_Sub_Input(&input, restArgs)
		return funcMethod(subcommandPath, input, err)

	}
	return nil
}

func resolveSubcommand(args []string) (subcommandPath []string, restArgs []string) {
	if len(args) == 0 {
		panic("command line arguments are too few")
	}
	subcommandSet := map[string]bool{
		"":    true,
		"sub": true,
	}

	for _, arg := range args[1:] {
		if arg == "--" {
			break
		}
		pathLiteral := strings.Join(append(append([]string{}, subcommandPath...), arg), " ")
		if !subcommandSet[pathLiteral] {
			break
		}
		subcommandPath = append(subcommandPath, arg)
	}

	return subcommandPath, args[1+len(subcommandPath):]
}

func parseValue(dstPtr any, strValue ...string) error {
	switch dstPtr := dstPtr.(type) {
	case *[]bool:
		val := make([]bool, len(strValue))
		for idx, str := range strValue {
			if err := parseValue(&val[idx], str); err != nil {
				return fmt.Errorf("fail to parse %#v as []bool: %w", str, err)
			}
		}
		*dstPtr = val
	case *[]float64:
		val := make([]float64, len(strValue))
		for idx, str := range strValue {
			if err := parseValue(&val[idx], str); err != nil {
				return fmt.Errorf("fail to parse %#v as []float64: %w", str, err)
			}
		}
		*dstPtr = val
	case *[]int64:
		val := make([]int64, len(strValue))
		for idx, str := range strValue {
			if err := parseValue(&val[idx], str); err != nil {
				return fmt.Errorf("fail to parse %#v as []int64: %w", str, err)
			}
		}
		*dstPtr = val
	case *[]string:
		val := make([]string, len(strValue))
		for idx, str := range strValue {
			if err := parseValue(&val[idx], str); err != nil {
				return fmt.Errorf("fail to parse %#v as []string: %w", str, err)
			}
		}
		*dstPtr = val
	case *bool:
		val, err := strconv.ParseBool(strValue[0])
		if err != nil {
			return fmt.Errorf("fail to parse %q as bool: %w", strValue[0], err)
		}
		*dstPtr = val
	case *float64:
		val, err := strconv.ParseFloat(strValue[0], 64)
		if err != nil {
			return fmt.Errorf("fail to parse %q as float64: %w", strValue[0], err)
		}
		*dstPtr = val
	case *int64:
		val, err := strconv.ParseInt(strValue[0], 0, 64)
		if err != nil {
			return fmt.Errorf("fail to parse %q as int64: %w", strValue[0], err)
		}
		*dstPtr = val
	case *string:
		*dstPtr = strValue[0]
	}

	return nil
}

func consumeVariables(...any) {}

func GetDoc(subcommands []string) string {
	switch strings.Join(subcommands, " ") {
	default:
		panic(fmt.Sprintf(`invalid subcommands: %v`, subcommands))

	case "":
		return "<program>\n\n<program>\n\n    Syntax:\n        $ <program> \n\n    Subcommands:\n        sub:\n\n\n"

	case "sub":
		return "<program>\n\n<program> sub\n\n    Syntax:\n        $ <program> sub [<argument>]... [-- [<argument>]...]\n\n    Arguments:\n        1.  <arg_integer:integer>\n\n        2.  <arg_boolean:boolean>\n\n        3.  <arg_string:string>\n\n        4. [<arg_variadic:string>]...\n\n\n"

	}
}
