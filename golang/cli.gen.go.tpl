// Code generated by {{.Generator}} {{.GeneratorVersion}}, DO NOT EDIT.
package {{.Package}}

import (
	"fmt"
	"bytes"
	"strings"

	cyamli_schema "github.com/Jumpaku/cyamli/schema"
	cyamli_golang "github.com/Jumpaku/cyamli/golang"
)

func LoadSchema() *cyamli_schema.Schema {
	var schema, _ = cyamli_schema.Load(bytes.NewBufferString({{.SchemaYAMLLiteral}}))
	return schema
}


type Func[Input any] func(subcommand []string, input Input, inputErr error) (err error)

{{/* Root command */}}
{{with .Program}}

type {{.CLIStructName}} struct {
{{range $Index, $Subcommand := .Subcommands}}	{{$Subcommand.SubcommandFieldName}} {{$Subcommand.SubcommandFieldType}}
{{end}}
	Func Func[{{.CLIInputStructName}}]
}

type {{.CLIInputStructName}} struct {
{{range $Index, $Option := .Options}}	{{$Option.InputFieldName}} {{$Option.InputFieldType}}
{{end}}
{{range $Index, $Argument := .Arguments}}	{{$Argument.InputFieldName}} {{$Argument.InputFieldType}}
{{end}}
}

{{end}}


{{/* Child commands */}}
{{range .Commands}}

type {{.CLIStructName}} struct {
{{range $Index, $Subcommand := .Subcommands}}	{{$Subcommand.SubcommandFieldName}} {{$Subcommand.SubcommandFieldType}}
{{end}}
	Func Func[{{.CLIInputStructName}}]
}

type {{.CLIInputStructName}} struct {
{{range $Index, $Option := .Options}}	{{$Option.InputFieldName}} {{$Option.InputFieldType}}
{{end}}
{{range $Index, $Argument := .Arguments}}	{{$Argument.InputFieldName}} {{$Argument.InputFieldType}}
{{end}}
}

{{end}}

{{/* CLI Constructor */}}
func NewCLI() {{.Program.CLIStructName}} {
	return CLI{}
}

{{/* Entry point */}}
func Run(cli CLI, args []string) error {
	s := LoadSchema()
	cmd, subcommand, restArgs := cyamli_golang.ResolveSubcommand(s, args)
	switch strings.Join(subcommand, " ") {
{{with .Program}}
	case {{.NameLiteral}}:
		input := {{.CLIInputStructName}}{
{{range $Index, $Option := .Options}}			{{$Option.InputFieldName}}: {{$Option.DefaultLiteral}},
{{end}}
		}
		funcMethod := cli.{{.CLIFuncMethodChain}}
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.{{.CLIFuncMethodChain}} not assigned", {{.NameLiteral}})
		}
		err := cyamli_golang.ResolveInput(cmd, restArgs, &input)
		return funcMethod(subcommand, input, err)
{{end}}
{{range .Commands}}
	case {{.NameLiteral}}:
		input := {{.CLIInputStructName}}{
{{range $Index, $Option := .Options}}			{{$Option.InputFieldName}}: {{$Option.DefaultLiteral}},
{{end}}
		}
		funcMethod := cli.{{.CLIFuncMethodChain}}
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.{{.CLIFuncMethodChain}} not assigned", {{.NameLiteral}})
		}
		err := cyamli_golang.ResolveInput(cmd, restArgs, &input)
		return funcMethod(subcommand, input, err)
{{end}}
	}
	return nil
}
