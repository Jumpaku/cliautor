// Code generated by {{.Generator}} ({{.GeneratorVersion}}) DO NOT EDIT.
package {{.Package}}

import (
	"fmt"
	"bytes"

	cliautor_schema "cliautor/schema"
	cliautor_golang "cliautor/golang"
)

var schema, _ = cliautor_schema.Load(bytes.NewBufferString({{.SchemaYAMLLiteral}}))

type Func[Input any] func(Input) error

{{/* Root command */}}
{{with .Program}}

type {{.CLIStructName}} struct {
{{range $Index, $Subcommand := .Subcommands}}	{{$Subcommand.SubcommandFieldName}} {{$Subcommand.SubcommandFieldType}}
{{end}}
	Func Func[{{.CLIInputStructName}}]
}

type {{.CLIInputStructName}} struct {
{{range $Index, $Option := .Options}}	{{$Option.InputFieldName}} {{$Option.InputFieldType}}
{{end}}
{{range $Index, $Argument := .Arguments}}	{{$Argument.InputFieldName}} {{$Argument.InputFieldType}}
{{end}}
}

{{end}}


{{/* Child commands */}}
{{range .Commands}}

type {{.CLIStructName}} struct {
{{range $Index, $Subcommand := .Subcommands}}	{{$Subcommand.SubcommandFieldName}} {{$Subcommand.SubcommandFieldType}}
{{end}}
	Func Func[{{.CLIInputStructName}}]
}

type {{.CLIInputStructName}} struct {
{{range $Index, $Option := .Options}}	{{$Option.InputFieldName}} {{$Option.InputFieldType}}
{{end}}
{{range $Index, $Argument := .Arguments}}	{{$Argument.InputFieldName}} {{$Argument.InputFieldType}}
{{end}}
}

{{end}}


{{/* Entry point */}}
func Run(cli CLI, args []string) error {
	cmd, subcommand, restArgs := cliautor_golang.ResolveSubcommand(schema, args)
	switch subcommand {
{{with .Program}}
	case {{.NameLiteral}}:
		input := {{.CLIInputStructName}}{
{{range $Index, $Option := .Options}}			{{$Option.InputFieldName}}: {{$Option.DefaultLiteral}},
{{end}}
		}
		if err := cliautor_golang.ResolveInput(cmd, restArgs, &input); err != nil {
			return fmt.Errorf("fail to resolve input: %w", err)
		}
		if err := cli.{{.CLIFuncMethodChain}}(input); err != nil {
			return fmt.Errorf("cli.{{.CLIFuncMethodChain}}(input) failed: %w", err)
		}
{{end}}
{{range .Commands}}
	case {{.NameLiteral}}:
		input := {{.CLIInputStructName}}{
{{range $Index, $Option := .Options}}			{{$Option.InputFieldName}}: {{$Option.DefaultLiteral}},
{{end}}
		}
		if err := cliautor_golang.ResolveInput(cmd, restArgs, &input); err != nil {
			return fmt.Errorf("fail to resolve input: %w", err)
		}
		if err := cli.{{.CLIFuncMethodChain}}(input); err != nil {
			return fmt.Errorf("cli.{{.CLIFuncMethodChain}}(input) failed: %w", err)
		}
{{end}}
	}
	return nil
}
