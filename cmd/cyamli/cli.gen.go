// Code generated by cyamli v0.0.8, DO NOT EDIT.
package main

import (
	"fmt"
	"bytes"
	"strings"

	cyamli_schema "github.com/Jumpaku/cyamli/schema"
	cyamli_golang "github.com/Jumpaku/cyamli/golang"
)

func LoadSchema() *cyamli_schema.Schema {
	var schema, _ = cyamli_schema.Load(bytes.NewBufferString("name: cyamli\nversion: v0.0.8\ndescription: A command line tool to generate CLI for your app from YAML-based schema.\noptions:\n  -help:\n    short: -h\n    description: shows description of this app\n    type: boolean\n    default: \"\"\n  -version:\n    short: -v\n    description: shows version of this app\n    type: boolean\n    default: \"\"\narguments: []\nsubcommands:\n  golang:\n    description: generates CLI for your app written in Go.\n    options:\n      -help:\n        short: -h\n        description: shows description of golang subcommand\n        type: boolean\n        default: \"\"\n      -out-path:\n        short: \"\"\n        description: if specified then creates a file at the path and writes generated code, otherwise outputs to stdout.\n        type: \"\"\n        default: \"\"\n      -package:\n        short: \"\"\n        description: package name where the generated file will be placed.\n        type: \"\"\n        default: main\n      -schema-path:\n        short: \"\"\n        description: if specified then reads schema file from the path, otherwise reads from stdin.\n        type: \"\"\n        default: \"\"\n    arguments: []\n    subcommands: {}\n"))
	return schema
}


type Func[Input any] func(subcommand []string, input Input, inputErr error) (err error)




type CLI struct {
	Sub_Golang CLI_Golang

	Func Func[CLI_Input]
}

type CLI_Input struct {
	Opt_Help bool
	Opt_Version bool


}







type CLI_Golang struct {

	Func Func[CLI_Golang_Input]
}

type CLI_Golang_Input struct {
	Opt_Help bool
	Opt_OutPath string
	Opt_Package string
	Opt_SchemaPath string


}




func NewCLI() CLI {
	return CLI{}
}


func Run(cli CLI, args []string) error {
	s := LoadSchema()
	cmd, subcommand, restArgs := cyamli_golang.ResolveSubcommand(s, args)
	switch strings.Join(subcommand, " ") {

	case "":
		input := CLI_Input{
			Opt_Help: false,
			Opt_Version: false,

		}
		funcMethod := cli.Func
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.Func not assigned", "")
		}
		err := cyamli_golang.ResolveInput(cmd, restArgs, &input)
		return funcMethod(subcommand, input, err)


	case "golang":
		input := CLI_Golang_Input{
			Opt_Help: false,
			Opt_OutPath: "",
			Opt_Package: "main",
			Opt_SchemaPath: "",

		}
		funcMethod := cli.Sub_Golang.Func
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.Sub_Golang.Func not assigned", "golang")
		}
		err := cyamli_golang.ResolveInput(cmd, restArgs, &input)
		return funcMethod(subcommand, input, err)

	}
	return nil
}
