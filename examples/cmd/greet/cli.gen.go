// Code generated by cyamli v0.0.8, DO NOT EDIT.
package main

import (
	"fmt"
	"bytes"
	"strings"

	cyamli_schema "github.com/Jumpaku/cyamli/schema"
	cyamli_golang "github.com/Jumpaku/cyamli/golang"
)

func LoadSchema() *cyamli_schema.Schema {
	var schema, _ = cyamli_schema.Load(bytes.NewBufferString("name: greet\nversion: \"\"\ndescription: this is an example program\noptions:\n  -help:\n    short: -h\n    description: Show help information.\n    type: boolean\n    default: \"\"\narguments: []\nsubcommands:\n  hello:\n    description: Prints \"Hello, <target name>! My name is <greeter>!\"\n    options:\n      -target-name:\n        short: -t\n        description: The name of the person to be said hello.\n        type: \"\"\n        default: \"\"\n    arguments:\n    - name: greeter\n      description: The name of the person who says hello.\n      type: \"\"\n      variadic: false\n    subcommands: {}\n"))
	return schema
}


type Func[Input any] func(subcommand []string, input Input, inputErr error) (err error)




type CLI struct {
	Sub_Hello CLI_Hello

	Func Func[CLI_Input]
}

type CLI_Input struct {
	Opt_Help bool


}







type CLI_Hello struct {

	Func Func[CLI_Hello_Input]
}

type CLI_Hello_Input struct {
	Opt_TargetName string

	Arg_Greeter string

}




func NewCLI() CLI {
	return CLI{}
}


func Run(cli CLI, args []string) error {
	s := LoadSchema()
	cmd, subcommand, restArgs := cyamli_golang.ResolveSubcommand(s, args)
	switch strings.Join(subcommand, " ") {

	case "":
		input := CLI_Input{
			Opt_Help: false,

		}
		funcMethod := cli.Func
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.Func not assigned", "")
		}
		err := cyamli_golang.ResolveInput(cmd, restArgs, &input)
		return funcMethod(subcommand, input, err)


	case "hello":
		input := CLI_Hello_Input{
			Opt_TargetName: "",

		}
		funcMethod := cli.Sub_Hello.Func
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.Sub_Hello.Func not assigned", "hello")
		}
		err := cyamli_golang.ResolveInput(cmd, restArgs, &input)
		return funcMethod(subcommand, input, err)

	}
	return nil
}
