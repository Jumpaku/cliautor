# Code generated by cyamli v0.0.11, DO NOT EDIT.

from dataclasses import dataclass
from typing import TypeAlias
import typing


FuncTypeInput = typing.TypeVar('FuncTypeInput')
FuncType: TypeAlias = typing.Callable[[None,FuncTypeInput,Exception],None]


@dataclass
class CLI_Hello_Input:
    opt_target_name: str = ""
    
    arg_greeter: str = str()
    
    pass


class CLI_Hello:
    
    desc_simple: str = "Prints \"Hello, <target name>! My name is <greeter>!\"\n\nUsage:\n    $ <program> hello [<option>|<argument>]... [-- [<argument>]...]\n\nOptions:\n    -target-name\n\nArguments:\n    <greeter>\n\n"
    desc_detail: str = "Prints \"Hello, <target name>! My name is <greeter>!\"\n\nUsage:\n    $ <program> hello [<option>|<argument>]... [-- [<argument>]...]\n\n\nOptions:\n    -target-name=<string>, -t=<string>  (default=\"\"):\n        The name of the person to be said hello.\n\n\nArguments:\n    [0]  <greeter:string>\n        The name of the person who says hello.\n\n"
    FUNC: FuncType[CLI_Hello_Input] = None


def resolve_CLI_Hello_Input(rest_args: list[str])->CLI_Hello_Input:
    input = CLI_Hello_Input()
    arguments = []
    for i, arg in enumerate(rest_args):
        if arg == "--":
            arguments += rest_args[i+1:]
            break
        if not arg.startswith("-"):
            arguments.append(arg)
            continue
        split = arg.split("=", 1)
        opt_name, assign = split[0], len(split) > 1
        match opt_name:
        
            case "-target-name" | "-t":
                if not assign:
                    raise Exception("value is not specified to option "+ opt_name)
                    
                input.opt_target_name = parse_value(str, split[1])
        
            case _:
                raise Exception("unsupported option " + opt_name)
    if len(arguments) <= 0:
        raise Exception("too few arguments")
    input.arg_greeter = parse_value(str, arguments[0])
    
    return input


@dataclass
class CLI_Input:
    opt_help: bool = False
    
    
    pass


class CLI:
    hello: CLI_Hello = CLI_Hello()
    
    desc_simple: str = "greet:\nthis is an example program\n\nUsage:\n    $ greet [<option>]...\n\nOptions:\n    -help\n\nSubcommands:\n    hello\n\n"
    desc_detail: str = "greet:\nthis is an example program\n\nUsage:\n    $ greet [<option>]...\n\n\nOptions:\n    -help[=<boolean>], -h[=<boolean>]  (default=false):\n        Show help information.\n\n\nSubcommands:\n    hello:\n        Prints \"Hello, <target name>! My name is <greeter>!\"\n\n"
    FUNC: FuncType[CLI_Input] = None


def resolve_CLI_Input(rest_args: list[str])->CLI_Input:
    input = CLI_Input()
    arguments = []
    for i, arg in enumerate(rest_args):
        if arg == "--":
            arguments += rest_args[i+1:]
            break
        if not arg.startswith("-"):
            arguments.append(arg)
            continue
        split = arg.split("=", 1)
        opt_name, assign = split[0], len(split) > 1
        match opt_name:
        
            case "-help" | "-h":
                if not assign:
                    split.append("True")
                    
                input.opt_help = parse_value(bool, split[1])
        
            case _:
                raise Exception("unsupported option " + opt_name)
    
    return input


def run(cli: CLI, args: list[str]):
    r = resolve_subcommand(args)
    subcommand_path, rest_args = r.subcommand, r.rest_args
    match " ".join(subcommand_path):
    
        case "":
            if not cli.FUNC:
                raise Exception("unsupported subcommand \"" + "" + "\": cli.FUNC not assigned")
            ex: Exception = None
            input: CLI_Input = None
            try:
                input = resolve_CLI_Input(rest_args)
            except Exception as e:
                ex = e
            cli.FUNC(input, ex)
    
    
        case "hello":
            if not cli.hello.FUNC:
                raise Exception("unsupported subcommand \"" + "hello" + "\": cli.hello.FUNC not assigned")
            ex: Exception = None
            input: CLI_Hello_Input = None
            try:
                input = resolve_CLI_Hello_Input(rest_args)
            except Exception as e:
                ex = e
            cli.hello.FUNC(input, ex)
    

@dataclass
class ResolveSubcommandResult:
    subcommand: list[str]
    rest_args: list[str]


def resolve_subcommand(args: list[str])->ResolveSubcommandResult:
    if not args:
        raise Exception("command line arguments are too few")
    
    subcommand_set = {
        "",
        "hello",
    }

    subcommand_path = []
    for arg in args[1:]:
        if arg == "--":
            break
        if " ".join(subcommand_path + [arg]) not in subcommand_set:
            break
        subcommand_path.append(arg)
    
    return ResolveSubcommandResult(subcommand_path, args[1+len(subcommand_path):])


def parse_value(typ, *strValues: str) -> str | bool | float | int | tuple[str,...] | tuple[bool,...] | tuple[float,...] | tuple[int,...]:
    try: 
        if typ == str:
            return str(strValues[0])
        if typ == bool:
            if strValues[0] in {"", "0", "f", "F", "FALSE", "false", "False"}:
                return False
            if strValues[0] in {"1", "t", "T", "TRUE", "true", "True"}:
                return True
            raise Exception("could not convert string to bool: '" + strValues[0] + "'")
        if typ == float:
            return float(strValues[0])
        if typ == int:
            return int(strValues[0], base=0)
        if typ == tuple[str,...]:
            return tuple([parse_value(str, s) for s in strValues])
        if typ == tuple[bool,...]:
            return tuple([parse_value(bool, s) for s in strValues])
        if typ == tuple[float,...]:
            return tuple([parse_value(float, s) for s in strValues])
        if typ == tuple[int,...]:
            return tuple([parse_value(int, s) for s in strValues])
        raise Exception("unsupported type")
    except Exception as e:
        e.add_note('fail to parse string value as ' + typ.__name__)
        raise
